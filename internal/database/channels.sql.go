// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: channels.sql

package database

import (
	"context"
)

const getChannelSubscribers = `-- name: GetChannelSubscribers :many
SELECT
    u.id,
    u.name,
    u.apikey,
    u.room,
    u.role
FROM
    users u
    JOIN channel_subscribers cs ON u.id = cs.user_id
    JOIN channels c ON cs.channel_id = c.id
WHERE
    c.name = ?
`

func (q *Queries) GetChannelSubscribers(ctx context.Context, name string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getChannelSubscribers, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Apikey,
			&i.Room,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannels = `-- name: GetChannels :many
SELECT
    id, name
FROM
    channels
`

func (q *Queries) GetChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChannel = `-- name: InsertChannel :one
INSERT INTO
    channels (name)
VALUES
    (?) RETURNING id, name
`

func (q *Queries) InsertChannel(ctx context.Context, name string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, insertChannel, name)
	var i Channel
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertChannelSubscribe = `-- name: InsertChannelSubscribe :one
INSERT INTO
    channel_subscribers (channel_id, user_id)
VALUES
    (?, ?) RETURNING id, channel_id, user_id
`

type InsertChannelSubscribeParams struct {
	ChannelID int64
	UserID    int64
}

func (q *Queries) InsertChannelSubscribe(ctx context.Context, arg InsertChannelSubscribeParams) (ChannelSubscriber, error) {
	row := q.db.QueryRowContext(ctx, insertChannelSubscribe, arg.ChannelID, arg.UserID)
	var i ChannelSubscriber
	err := row.Scan(&i.ID, &i.ChannelID, &i.UserID)
	return i, err
}
