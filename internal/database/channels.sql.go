// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: channels.sql

package database

import (
	"context"
)

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM channels
WHERE
    id = ?
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT
    id, name
FROM
    channels
WHERE
    id = ?
`

func (q *Queries) GetGroupByID(ctx context.Context, id int64) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i Channel
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getGroupByUserID = `-- name: GetGroupByUserID :many
SELECT
    channels.id, channels.name
FROM
    channels
    JOIN channel_subscribers ON channels.id = channel_subscribers.channel_id
WHERE
    channel_subscribers.user_id = ?
`

func (q *Queries) GetGroupByUserID(ctx context.Context, userID int64) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getGroupByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscribersByGroupID = `-- name: GetSubscribersByGroupID :many
SELECT
    users.id, users.name, users.apikey, users.room, users.role
FROM
    users
    JOIN channel_subscribers ON users.id = channel_subscribers.user_id
WHERE
    channel_subscribers.channel_id = ?
`

func (q *Queries) GetSubscribersByGroupID(ctx context.Context, channelID int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getSubscribersByGroupID, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Apikey,
			&i.Room,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGroup = `-- name: InsertGroup :one
INSERT INTO
    channels (name)
VALUES
    (?) RETURNING id, name
`

func (q *Queries) InsertGroup(ctx context.Context, name string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, insertGroup, name)
	var i Channel
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const subscribeToGroup = `-- name: SubscribeToGroup :exec
INSERT INTO
    channel_subscribers (channel_id, user_id)
VALUES
    (?, ?) ON CONFLICT DO NOTHING
`

type SubscribeToGroupParams struct {
	ChannelID int64
	UserID    int64
}

func (q *Queries) SubscribeToGroup(ctx context.Context, arg SubscribeToGroupParams) error {
	_, err := q.db.ExecContext(ctx, subscribeToGroup, arg.ChannelID, arg.UserID)
	return err
}

const unsubscribeFromGroup = `-- name: UnsubscribeFromGroup :exec
DELETE FROM channel_subscribers
WHERE
    channel_id = ?
    AND user_id = ?
`

type UnsubscribeFromGroupParams struct {
	ChannelID int64
	UserID    int64
}

func (q *Queries) UnsubscribeFromGroup(ctx context.Context, arg UnsubscribeFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, unsubscribeFromGroup, arg.ChannelID, arg.UserID)
	return err
}
