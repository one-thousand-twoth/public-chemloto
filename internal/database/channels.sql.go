// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: channels.sql

package database

import (
	"context"
	"database/sql"
)

const getChannel = `-- name: GetChannel :one
SELECT
    id, name, type, room_name
FROM
    channels
WHERE
    type = ?
    AND name = ?
`

type GetChannelParams struct {
	Type string
	Name string
}

func (q *Queries) GetChannel(ctx context.Context, arg GetChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannel, arg.Type, arg.Name)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.RoomName,
	)
	return i, err
}

const getChannelByID = `-- name: GetChannelByID :one
SELECT
    id, name, type, room_name
FROM
    channels
WHERE
    id = ?
`

func (q *Queries) GetChannelByID(ctx context.Context, id int64) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByID, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.RoomName,
	)
	return i, err
}

const getChannelSubscribers = `-- name: GetChannelSubscribers :many
SELECT
    u.id,
    u.name,
    u.apikey,
    u.room,
    u.role
FROM
    users u
    JOIN channel_subscribers cs ON u.id = cs.user_id
    JOIN channels c ON cs.channel_id = c.id
WHERE
    c.name = ?
`

func (q *Queries) GetChannelSubscribers(ctx context.Context, name string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getChannelSubscribers, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Apikey,
			&i.Room,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannels = `-- name: GetChannels :many
SELECT
    id, name, type, room_name
FROM
    channels
`

func (q *Queries) GetChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.RoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChannelSubscribe = `-- name: InsertChannelSubscribe :one
INSERT INTO
    channel_subscribers (channel_id, user_id)
VALUES
    (?, ?) RETURNING id, channel_id, user_id
`

type InsertChannelSubscribeParams struct {
	ChannelID int64
	UserID    int64
}

func (q *Queries) InsertChannelSubscribe(ctx context.Context, arg InsertChannelSubscribeParams) (ChannelSubscriber, error) {
	row := q.db.QueryRowContext(ctx, insertChannelSubscribe, arg.ChannelID, arg.UserID)
	var i ChannelSubscriber
	err := row.Scan(&i.ID, &i.ChannelID, &i.UserID)
	return i, err
}

const insertChannelSubscribeByChannelName = `-- name: InsertChannelSubscribeByChannelName :one
INSERT INTO
    channel_subscribers (channel_id, user_id)
VALUES
    (
        (
            SELECT
                id
            FROM
                channels
            WHERE
                name = ?
                AND type = 'channel'
        ),
        ?
    ) RETURNING id, channel_id, user_id
`

type InsertChannelSubscribeByChannelNameParams struct {
	Name   string
	UserID int64
}

func (q *Queries) InsertChannelSubscribeByChannelName(ctx context.Context, arg InsertChannelSubscribeByChannelNameParams) (ChannelSubscriber, error) {
	row := q.db.QueryRowContext(ctx, insertChannelSubscribeByChannelName, arg.Name, arg.UserID)
	var i ChannelSubscriber
	err := row.Scan(&i.ID, &i.ChannelID, &i.UserID)
	return i, err
}

const insertRegularChannel = `-- name: InsertRegularChannel :one
INSERT INTO
    channels (name, type, room_name)
VALUES
    (?, 'channel', NULL) RETURNING id, name, type, room_name
`

func (q *Queries) InsertRegularChannel(ctx context.Context, name string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, insertRegularChannel, name)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.RoomName,
	)
	return i, err
}

const insertRoomChannel = `-- name: InsertRoomChannel :one
INSERT INTO
    channels (name, type, room_name)
VALUES
    (?, 'room', ?) RETURNING id, name, type, room_name
`

type InsertRoomChannelParams struct {
	Name     string
	RoomName sql.NullString
}

func (q *Queries) InsertRoomChannel(ctx context.Context, arg InsertRoomChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, insertRoomChannel, arg.Name, arg.RoomName)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.RoomName,
	)
	return i, err
}

const insertRoomSubscriberByRoomName = `-- name: InsertRoomSubscriberByRoomName :one
INSERT INTO
    channel_subscribers (channel_id, user_id)
VALUES
    (
        (
            SELECT
                id
            FROM
                channels
            WHERE
                room_name = ?
                AND type = 'room'
        ),
        ?
    ) RETURNING id, channel_id, user_id
`

type InsertRoomSubscriberByRoomNameParams struct {
	RoomName sql.NullString
	UserID   int64
}

func (q *Queries) InsertRoomSubscriberByRoomName(ctx context.Context, arg InsertRoomSubscriberByRoomNameParams) (ChannelSubscriber, error) {
	row := q.db.QueryRowContext(ctx, insertRoomSubscriberByRoomName, arg.RoomName, arg.UserID)
	var i ChannelSubscriber
	err := row.Scan(&i.ID, &i.ChannelID, &i.UserID)
	return i, err
}
