// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const getUserSubsribtions = `-- name: GetUserSubsribtions :many
SELECT
    c.id,
    c.name
FROM
    channels c
    JOIN channel_subscribers cs ON c.id = cs.channel_id
WHERE
    cs.user_id = ?
`

func (q *Queries) GetUserSubsribtions(ctx context.Context, userID int64) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getUserSubsribtions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT
    id, name, apikey, room, role
FROM
    users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Apikey,
			&i.Room,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
    users (name, apikey, room, role)
VALUES
    (?, ?, ?, ?) RETURNING id, name, apikey, room, role
`

type InsertUserParams struct {
	Name   string
	Apikey string
	Room   sql.NullString
	Role   int64
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Name,
		arg.Apikey,
		arg.Room,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Apikey,
		&i.Room,
		&i.Role,
	)
	return i, err
}

const patchUserRole = `-- name: PatchUserRole :one
UPDATE users
SET
    role = ?
WHERE
    name = ? RETURNING id, name, apikey, room, role
`

type PatchUserRoleParams struct {
	Role int64
	Name string
}

func (q *Queries) PatchUserRole(ctx context.Context, arg PatchUserRoleParams) (User, error) {
	row := q.db.QueryRowContext(ctx, patchUserRole, arg.Role, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Apikey,
		&i.Room,
		&i.Role,
	)
	return i, err
}
